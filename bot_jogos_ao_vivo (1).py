# -*- coding: utf-8 -*-
"""bot jogos ao vivo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MRcnbfLiA14sYs1QCDRvEtfVh2M_OB2D

### Instalando as Bibliotecas
"""

pip install requests fake_useragent pyTelegramBotAPI

"""### Importando as Bibliotecas"""

import requests
from fake_useragent import UserAgent
import telebot
import pytz
import time
import atexit
from datetime import datetime, timedelta
from requests.exceptions import RequestException

"""### Configura√ßoes do bot"""

# Configura√ß√µes do bot do Telegram
telegram_token = "6194579933:AAHEbcayoaPTnM9K4iXQpxcV-XvgIxteSkY"
chat_id = "-1001963055925"

# Configura√ß√µes da estrat√©gia
nome_estrategia = "over gol +0,5 / 1¬∞ tempo"
nome_bot = "Bot_over_gol"
minutos_min = 10 # Tempo m√≠nimo do jogo para envio de alerta
minutos_max = 35 # Tempo m√°ximo do jogo para envio de alerta
total_gols = 4 # N√∫mero m√°ximo total de gols
total_chutes = 8 # Total de chutes, independentemente de serem no alvo ou n√£o
total_cantos = 2 # N√∫mero m√≠nimo total de cantos
total_ataques_perigosos = 10 # N√∫mero m√≠nimo total de ataques perigosos
total_ataques_perigosos_pm = 1.5 # N√∫mero m√≠nimo total de ataques perigosos por minuto para ambas as equipes

# Configura√ß√µes da estrat√©gia

nome_estrategia = "over gol +0,5 / 2¬∞ tempo"

nome_bot = "Bot_over_gol"

minutos_min = 50 # Tempo m√≠nimo do jogo para envio de alerta

minutos_max = 80 # Tempo m√°ximo do jogo para envio de alerta

total_gols = 4 # N√∫mero m√°ximo total de gols

total_chutes = 25 # Total de chutes, independentemente de serem no alvo ou n√£o

total_cantos = 6 # N√∫mero m√≠nimo total de cantos

total_ataques_perigosos = 45 # N√∫mero m√≠nimo total de ataques perigosos

total_ataques_perigosos_pm = 1.5 # N√∫mero m√≠nimo total de ataques perigosos por minuto para ambas as equipes

"""### Corpo do Bot"""

bot = telebot.TeleBot(telegram_token)
text = "<b>Bot analisando!!</b> üöÄ"
bot.send_message(chat_id=chat_id, text=text, parse_mode="html", disable_web_page_preview=True)

jogos_enviados = set()

def obter_dados():
    try:
        ua = UserAgent()
        headers = {
            'User-Agent': ua.random,
        }
        url = 'https://api.sportsanalytics.com.br/api/v1/fixtures-svc/fixtures/livescores'
        params = {
            'include': 'weatherReport,additionalInfo,league,stats,pressureStats,probabilities'
        }
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        dados = response.json()
        return dados
    except RequestException as e:
        print(f"Erro ao fazer a requisi√ß√£o: {e}")
        return None

def obter_caracteristicas(dados):
    caracteristicas = [
        {
            'fixtureId': jogo['fixtureId'],
            'timeC': jogo['homeTeam'].get('name', ''),
            'timeV': jogo['awayTeam'].get('name', ''),
            'placarC': jogo['scores'].get('homeTeamScore', 0),
            'placarV': jogo['scores'].get('awayTeamScore', 0),
            'liga': jogo['league'].get('name', ''),
            'minuto': jogo['currentTime'].get('minute', 0),
            
            'ataques_perigosos_C': jogo.get('stats', {}).get('dangerousAttacks', {}).get('home', 0) if jogo.get('stats') and jogo.get('stats', {}).get('dangerousAttacks') else 0,
            'ataques_perigosos_V': jogo.get('stats', {}).get('dangerousAttacks', {}).get('away', 0) if jogo.get('stats') and jogo.get('stats', {}).get('dangerousAttacks') else 0,
            'chutes_no_gol_C': jogo.get('stats', {}).get('shotsOngoal', {}).get('home', 0) if jogo.get('stats') and jogo.get('stats', {}).get('shotsOngoal') else 0,
            'chutes_no_gol_V': jogo.get('stats', {}).get('shotsOngoal', {}).get('away', 0) if jogo.get('stats') and jogo.get('stats', {}).get('shotsOngoal') else 0,
            'chutes_fora_C': jogo.get('stats', {}).get('shotsOffgoal', {}).get('home', 0) if jogo.get('stats') and jogo.get('stats', {}).get('shotsOffgoal') else 0,
            'chutes_fora_V': jogo.get('stats', {}).get('shotsOffgoal', {}).get('away', 0) if jogo.get('stats') and jogo.get('stats', {}).get('shotsOffgoal') else 0,
            'escanteios_C': jogo.get('stats', {}).get('corners', {}).get('home', 0) if jogo.get('stats') and jogo.get('stats', {}).get('corners') else 0,
            'escanteios_V': jogo.get('stats', {}).get('corners', {}).get('away', 0) if jogo.get('stats') and jogo.get('stats', {}).get('corners') else 0
        }
        for jogo in (j for j in dados['data'] if j and isinstance(j, dict))
    ]
    return caracteristicas

def estrategia(caracteristicas, nome_estrategia, nome_bot, minutos_min, minutos_max, total_chutes, total_gols, total_cantos, total_ataques_perigosos, total_ataques_perigosos_pm):
    count = 0  
    for jogo in (j for j in caracteristicas if minutos_min <= j['minuto'] <= minutos_max):
        jogo_id = jogo['fixtureId'] 
        if jogo_id not in jogos_enviados: 
            shots = jogo['chutes_no_gol_C'] + jogo['chutes_no_gol_V'] + jogo['chutes_fora_C'] + jogo['chutes_fora_V']
            if shots >= total_chutes and jogo['placarC'] + jogo['placarV'] <= total_gols and jogo['escanteios_C'] + jogo['escanteios_V'] >= total_cantos and jogo['ataques_perigosos_C'] + jogo['ataques_perigosos_V'] >= total_ataques_perigosos:
                appmT = (jogo['ataques_perigosos_C'] + jogo['ataques_perigosos_V']) / jogo['minuto']
                if appmT >= total_ataques_perigosos_pm:
                    convert_nome = jogo['timeC'].replace(" ","+")
                    link_bet365 = f"https://www.bet365.com/#/AX/K%5E{convert_nome}/"
                    count += 1
                    text = f'''Estrat√©gia: 
<b>{nome_estrategia}</b>

üÜö <b>{jogo['timeC']} x {jogo['timeV']}</b>
üèÜ {jogo['liga']}
‚è∞ {jogo['minuto']}' minutos

üì≤ <a href='{link_bet365}'><b>Link do jogo na Bet365</b></a>

üìä<b>Estat√≠sticas (Casa - Fora)</b>
ü•Ö Placar: {jogo['placarC']} - {jogo['placarV']}
üî• Ataques Perigosos: {jogo['ataques_perigosos_C']} - {jogo['ataques_perigosos_V']}
üéØ Chutes ao gol: {jogo['chutes_no_gol_C']} - {jogo['chutes_no_gol_V']}
üí• Chutes fora do gol: {jogo['chutes_fora_C']} - {jogo['chutes_fora_V']}
‚õ≥Ô∏è Escanteios: {jogo['escanteios_C']} - {jogo['escanteios_V']}

üìä <b>{nome_bot}</b> analisou as estat√≠sticas e aprovou!

<b>Pr√©-live</b> üÜó  <b>Ao-vivo</b> üÜó'''
                    bot.send_message(chat_id=chat_id, text=text, parse_mode="html", disable_web_page_preview=True)
                    jogos_enviados.add(jogo_id) 
    return count

while True:
    try:
        dados = obter_dados()
        caracteristicas = obter_caracteristicas(dados)
        estrategia(caracteristicas, nome_estrategia, nome_bot, minutos_min, minutos_max, total_chutes, total_gols, total_cantos, total_ataques_perigosos, total_ataques_perigosos_pm)
    except RequestException as e:
        print(f"Erro ao fazer a requisi√ß√£o: {e}")
    time.sleep(120)